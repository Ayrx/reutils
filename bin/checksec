#!/usr/bin/env python3

import click
import lief


@click.command(
    help="Check the security properties of a binary file."
)
@click.argument("bin", type=click.Path(exists=True))
def cli(bin):
    bin_parsed = lief.parse(bin)

    if bin_parsed.format == lief.EXE_FORMATS.ELF:
        bin_format = "ELF"
    elif bin_parsed.format == lief.EXE_FORMATS.PE:
        bin_format = "PE"
    elif bin_parsed.format == lief.EXE_FORMATS.MACHO:
        bin_format = "Mach-O"
    else:
        click.echo("Unknown format detected. Exiting.")
        return

    click.echo("[+] Target is a {} binary.".format(bin_format))

    if bin_format == "ELF":
        print("Not implemented yet.")

    elif bin_format == "PE":
        print("Not implemented yet.")

    elif bin_format == "Mach-O":
        # We reparse this because we want to get the Fat Binary info...
        bin_parsed = lief.MachO.parse(bin)
        macho(bin_parsed)


def macho(bin_parsed):
    click.echo("[+] Mach-O file contains {} binaries.".format(bin_parsed.size))
    click.echo()

    # List of runtime ARC functions taken from:
    # https://clang.llvm.org/docs/AutomaticReferenceCounting.html#runtime-support
    arc_symbols = [
        "_objc_autorelease",
        "_objc_releasePoolPop",
        "_objc_releasePoolPush",
        "_objc_autoreleaseReturnValue",
        "_objc_copyWeak",
        "_objc_destroyWeak",
        "_objc_initWeak",
        "_objc_loadWeak",
        "_objc_loadWeakRetained",
        "_objc_moveWeak",
        "_objc_release",
        "_objc_retain",
        "_objc_retainAutorelease",
        "_objc_retainAutoreleaseReturnValue",
        "_objc_retainAutoreleasedReturnValue",
        "_objc_retainBlock",
        "_objc_storeStrong",
        "_objc_storeWeak",
    ]

    stack_canary_symbols = [
        "___stack_chk_guard",
        "___stack_chk_fail",
    ]

    for index, binary in enumerate(bin_parsed):
        click.echo("#{}: {}".format(index + 1, binary.header.cpu_type))

        has_stack_canary = 0
        has_arc = 0
        has_dwarf = False

        for symbol in binary.symbols:
            if symbol.name in stack_canary_symbols:
                has_stack_canary += 1

            if symbol.name in arc_symbols:
                has_arc += 1

        for section in binary.segments:
            if section.name == "__DWARF":
                has_dwarf = True


        click.echo("{0:15} {1}".format("PIE:", str(binary.is_pie)))
        click.echo("{0:15} {1}".format(
            "Stack Canary:",
            True if has_stack_canary == 2 else False
        ))
        click.echo("{0:15} {1}".format(
            "ARC:",
            True if has_arc >= 1 else False
        ))
        click.echo("{0:15} {1}".format("Debug Symbols:", has_dwarf))

        click.echo()


if __name__ == "__main__":
    cli()
